{"version":3,"sources":["App.tsx","index.tsx"],"names":["Dashboard","accessToken","useAuth","userData","access_token","spotify","useRef","Spotify","prevAlbum","current","setAccessToken","useQuery","a","getMyCurrentPlaybackState","album","item","id","song","pos","track_number","refetchInterval","enabled","getAccessToken","data","error","useMutation","albumId","getAlbumTracks","limit","offset","tracks","items","track","queue","uri","mutationEnqueueAlbum","enqueueing","useEffect","isLoading","JSON","parse","response","message","About","signIn","history","useHistory","href","bannerColor","onClick","push","RequireAuth","children","loginPage","loading","replace","App","className","userManager","UserManager","authority","metadata","authorization_endpoint","token_endpoint","response_type","client_id","redirect_uri","scope","autoSignIn","automaticSilentRenew","onSignIn","user","exact","path","ReactDOM","render","StrictMode","basename","document","getElementById"],"mappings":"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","file":"static/js/main.e7380f7a.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react'\nimport { AuthProvider, useAuth, UserManager } from 'oidc-react'\nimport { Route, useHistory } from 'react-router-dom'\nimport Spotify from 'spotify-web-api-js'\nimport { useMutation, useQuery } from 'react-query'\nimport GithubCorner from 'react-github-corner'\n\nconst Dashboard: React.FC = () => {\n  const accessToken = useAuth()?.userData?.access_token ?? null\n  const spotify = useRef(new Spotify())\n  const prevAlbum = useRef<string>()\n  spotify.current.setAccessToken(accessToken)\n\n  const { data: current, error } = useQuery(\n    'current-playing',\n    async () => {\n      const current = await spotify.current.getMyCurrentPlaybackState()\n      return {\n        album: current.item?.album.id,\n        song: current.item?.id,\n        pos: current.item?.track_number,\n      }\n    },\n    {\n      refetchInterval: 10_000,\n      enabled: spotify.current.getAccessToken(),\n    }\n  )\n  const [mutationEnqueueAlbum, enqueueing] = useMutation(\n    async (albumId: string) => {\n      const tracks = await spotify.current.getAlbumTracks(albumId, {\n        limit: 50,\n        offset: 1,\n      })\n      for (const track of tracks.items) await spotify.current.queue(track.uri)\n    }\n  )\n\n  useEffect(() => {\n    ;(async () => {\n      if (\n        prevAlbum.current !== current?.album &&\n        current?.album &&\n        current?.pos === 1\n      )\n        mutationEnqueueAlbum(current?.album)\n      prevAlbum.current = current?.album\n    })()\n  }, [mutationEnqueueAlbum, current])\n\n  return (\n    <div>\n      <h1>Dashboard</h1>\n      {enqueueing.isLoading && 'enqueueing songs'}\n      {error\n        ? 'ERROR: ' +\n          JSON.parse((error as XMLHttpRequest).response).error.message\n        : 'TODO put something status-y here'}\n    </div>\n  )\n}\n\nconst About: React.FC = () => {\n  const { signIn, userData } = useAuth()!\n  const history = useHistory()\n  return (\n    <div>\n      <GithubCorner\n        href=\"https://github.com/Briaoeuidhtns/splat\"\n        bannerColor=\"#1DB954\"\n      />\n      <h1>Splat</h1>\n      <p>Quick description or smth, warning about login redirect</p>\n      <h2>\n        Known <i>FeAtUrEs</i>\n      </h2>\n      <ul>\n        <li>\n          If the first song is shorter than the poll time (10 seconds), the\n          album may not get enqueued\n        </li>\n        <li>On page reload songs get enqueued another time</li>\n        <li>\n          Everything is done from the browser, so this site has to stay open.\n        </li>\n        <li>\n          Token sometimes doesn't auto refresh, in case of errors close/open\n          page\n        </li>\n      </ul>\n\n      {userData?.access_token ? (\n        <button onClick={() => history.push('/dashboard')}>Go to app</button>\n      ) : (\n        <button onClick={() => signIn()}>Log in to Spotify</button>\n      )}\n    </div>\n  )\n}\n\nconst RequireAuth: React.FC<{ loginPage: string }> = ({\n  children,\n  loginPage,\n}) => {\n  const { userData, loading } = useAuth()!\n  const history = useHistory()\n  if (!userData?.access_token && !loading) history.replace(loginPage)\n  if (!loading) return <>{children}</>\n  return null\n}\n\nconst App: React.FC = () => {\n  const history = useHistory()\n  return (\n    <div className=\"App\">\n      <AuthProvider\n        userManager={\n          new UserManager({\n            authority: 'https://accounts.spotify.com/',\n            metadata: {\n              authorization_endpoint: 'https://accounts.spotify.com/authorize',\n              token_endpoint: 'https://accounts.spotify.com/api/token',\n            },\n            response_type: 'code',\n            client_id: '908eaf93b654400f95f7bb221967a65b',\n            redirect_uri: 'https://briaoeuidhtns.github.io/splat/auth',\n            scope: 'user-read-playback-state user-modify-playback-state',\n          })\n        }\n        autoSignIn={false}\n        automaticSilentRenew\n        onSignIn={(user) => history.replace('/dashboard', user)}\n      >\n        <Route exact path=\"/\">\n          <About />\n        </Route>\n        <Route path=\"/dashboard\">\n          <RequireAuth loginPage=\"/\">\n            <Dashboard />\n          </RequireAuth>\n        </Route>\n      </AuthProvider>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { BrowserRouter as Router } from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router basename=\"/splat\">\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}